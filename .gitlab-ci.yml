# GitLab CI/CD Pipeline for Flakiness Analysis
# This runs inside gitlab.cee.redhat.com and analyzes the GitLab repos
# Results are pushed to GitHub repo and Grafana Cloud

stages:
  - analyze

analyze-gitlab-flakiness:
  stage: analyze
  image: docker:24
  tags:
    - shared
    - x86_64

  # Run hourly
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web"  # Allow manual runs
    - if: $CI_PIPELINE_SOURCE == "push"  # Also run on push for testing

  variables:
    GIT_STRATEGY: clone
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

  services:
    - docker:24-dind

  before_script:
    - apk add --no-cache python3 py3-pip git curl
    - pip3 install --no-cache-dir prometheus-client requests --break-system-packages
    - git config --global user.name "gitlab-ci[bot]"
    - git config --global user.email "gitlab-ci[bot]@gitlab.cee.redhat.com"
    - until docker info; do sleep 1; done

  script:
    # Start Pushgateway
    - echo "🚀 Starting Pushgateway..."
    - docker run -d --name pushgateway -p 9091:9091 prom/pushgateway
    - sleep 5

    # Run the GitLab flakiness analyzer (pushes to pushgateway)
    - echo "🔍 Analyzing GitLab repos for retests..."
    - export PROMETHEUS_PUSHGATEWAY="pushgateway:9091"
    - python3 analyze_gitlab_flakiness.py

    # Create Prometheus config with env var substitution
    - echo "📝 Creating Prometheus config..."
    - |
      cat > /tmp/prometheus.yml <<EOF
      global:
        scrape_interval: 5s
      scrape_configs:
        - job_name: 'pushgateway'
          honor_labels: true
          static_configs:
            - targets: ['pushgateway:9091']
      remote_write:
        - url: ${GRAFANA_CLOUD_URL}
          basic_auth:
            username: ${GRAFANA_CLOUD_USER}
            password: ${GRAFANA_CLOUD_TOKEN}
      EOF

    # Start Prometheus and let it scrape + remote write
    - echo "🔄 Starting Prometheus to push metrics to Grafana Cloud..."
    - docker run -d --name prometheus --link pushgateway -p 9090:9090 -v /tmp/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus
    - echo "⏳ Waiting 30 seconds for Prometheus to scrape and push..."
    - sleep 30
    - echo "✅ Metrics should now be in Grafana Cloud!"

    # Cleanup
    - docker stop prometheus pushgateway || true

    # Copy the generated JSON file and push to GitHub
    - echo "📤 Pushing results to GitHub repo..."
    - |
      # Clone repo without token
      git clone https://github.com/lenasolarova/konflux_metrics.git /tmp/konflux_metrics
      cd /tmp/konflux_metrics

      # Copy the generated JSON file
      cp ${CI_PROJECT_DIR}/gitlab_flakiness_7days.json .

      # Commit and push to GitHub
      git add gitlab_flakiness_7days.json

      if git diff --cached --quiet; then
        echo "📊 No changes to commit"
      else
        echo "📊 Committing new GitLab retest metrics..."
        git commit -m "chore: update GitLab retest metrics [gitlab-ci]"

        # Create askpass helper script that echoes the token
        echo '#!/bin/sh' > /tmp/askpass.sh
        echo "echo \$GITHUB_TOKEN" >> /tmp/askpass.sh
        chmod +x /tmp/askpass.sh

        # Export for git to use
        export GIT_ASKPASS=/tmp/askpass.sh
        export GIT_TERMINAL_PROMPT=0

        # Push to GitHub
        git push origin main
        echo "✅ Results pushed to GitHub!"
      fi

  artifacts:
    paths:
      - gitlab_flakiness_7days.json
    expire_in: 90 days
